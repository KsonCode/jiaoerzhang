package com.jiaoerzhang.platform.adapter.album;import android.content.Context;import android.content.Intent;import android.graphics.drawable.Drawable;import android.net.Uri;import android.support.annotation.NonNull;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import com.blankj.utilcode.util.SPUtils;import com.blankj.utilcode.util.ToastUtils;import com.facebook.drawee.view.SimpleDraweeView;import com.jiaoerzhang.platform.R;import com.jiaoerzhang.platform.api.AlbumApi;import com.jiaoerzhang.platform.api.AlbumApiService;import com.jiaoerzhang.platform.common.Constants;import com.jiaoerzhang.platform.entity.album.AlbumEntity;import com.jiaoerzhang.platform.entity.user.CollectionEntity;import com.jiaoerzhang.platform.lib_net.network.BaseResponse;import com.jiaoerzhang.platform.ui.activity.album.AlbumDetailActivity;import com.jiaoerzhang.platform.ui.activity.album.NormalAlbumDetailActivity;import com.jiaoerzhang.platform.utils.RetrofitUtils;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;public class OrdinaryAlbumAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private Context context;    private List<AlbumEntity.Content> list = new ArrayList<>();    private LayoutInflater inflater;    public OrdinaryAlbumAdapter(Context context, List<AlbumEntity.Content> all) {        this.context = context;        this.list = all;        inflater = LayoutInflater.from(context);    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        View view = inflater.inflate(R.layout.fragment_album_item_layout, viewGroup, false);        RecyclerView.ViewHolder holder = new MyViewHolder1(view);        return holder;    }    @Override    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder viewHolder, final int i) {        if (viewHolder instanceof MyViewHolder1) {            final AlbumEntity.Content content = list.get(i);            viewHolder.itemView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    Intent intent = null;                    if (list.get(i).getClarity().equals(Constants.ORDINARY_CLARITY)){//普通                        intent = new Intent(context, NormalAlbumDetailActivity.class);                    }else if (list.get(i).getClarity().equals(Constants.POPULAR_CLARITY)){                        intent = new Intent(context, AlbumDetailActivity.class);                    }   intent.putExtra("albumId", list.get(i).getId() + "");                    intent.putExtra("clarity",list.get(i).getClarity() +"");                    context.startActivity(intent);                }            });            if ("true".equals(content.isNot())) {                setDrawable(((MyViewHolder1) viewHolder).numTv,true);            } else {                setDrawable(((MyViewHolder1) viewHolder).numTv, false);            }            if (list.size() > 0) {                Uri uri = Uri.parse(content.getCoverUrl());                SimpleDraweeView simpleDraweeView = viewHolder.itemView.findViewById(R.id.album_item_icon);                simpleDraweeView.setImageURI(uri);//                ((MyViewHolder1) viewHolder).numTv.setText(content.getUcollectNum()+"");                ((MyViewHolder1) viewHolder).numTv.setText("");                ((MyViewHolder1) viewHolder).numTv.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        HashMap<String, String> params = new HashMap<String, String>();                        params.put("username", SPUtils.getInstance().getString("username"));                        params.put("type", "1");                        params.put("albumPhotoId", content.getId() + "");                        if (content.isNot().equals("false")){                            RetrofitUtils.getInstance().createService(AlbumApiService.class)                                    .collection(AlbumApi.COLLECTION_URL, params)                                    .subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer<BaseResponse<CollectionEntity>>() {                                        @Override                                        public void accept(BaseResponse<CollectionEntity> collection) throws Exception {                                            if ("200".equals(collection.getStatus())) {                                                content.setNot("true");                                                notifyDataSetChanged();                                                setDrawable(((MyViewHolder1) viewHolder).numTv, true);                                            }                                            ToastUtils.showShort(collection.getMessage());                                        }                                    }, new Consumer<Throwable>() {                                        @Override                                        public void accept(Throwable throwable) throws Exception {                                        }                                    });                        }else{                            RetrofitUtils.getInstance().createService(AlbumApiService.class)                                    .cancelCollection(AlbumApi.CANCEL_COLLECTION_URL, params)                                    .subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer<BaseResponse<CollectionEntity>>() {                                        @Override                                        public void accept(BaseResponse<CollectionEntity> collection) throws Exception {                                            if ("200".equals(collection.getStatus())) {                                                content.setNot("false");                                                notifyDataSetChanged();                                                setDrawable(((MyViewHolder1) viewHolder).numTv, true);                                            }                                            ToastUtils.showShort(collection.getMessage());                                        }                                    }, new Consumer<Throwable>() {                                        @Override                                        public void accept(Throwable throwable) throws Exception {                                        }                                    });                        }                    }                });            } else {            }        }    }    private void setDrawable(TextView followNumTv, boolean b) {        Drawable drawable = null;        if (b){            drawable = context.getResources().getDrawable(R.mipmap.album_red_heart_icon);        }else{            drawable = context.getResources().getDrawable(R.mipmap.album_gray_heart_icon);        }        //一定要加这行！！！！！！！！！！！        drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());        followNumTv.setCompoundDrawables(null, null, drawable, null);    }    @Override    public int getItemCount() {        return list.size();    }    @Override    public long getItemId(int position) {        return super.getItemId(position);    }    public void refreshData(@NotNull List<AlbumEntity.Content> content) {        if (content.size() == 0) {            ToastUtils.showShort(R.string.no_more_data);            return;        }        this.list.addAll(content);        notifyDataSetChanged();    }    class MyViewHolder1 extends RecyclerView.ViewHolder {        private TextView numTv;        public MyViewHolder1(@NonNull View itemView) {            super(itemView);            numTv = itemView.findViewById(R.id.collectionNum);        }    }}