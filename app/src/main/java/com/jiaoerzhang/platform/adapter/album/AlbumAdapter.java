package com.jiaoerzhang.platform.adapter.album;import android.content.Context;import android.content.Intent;import android.graphics.drawable.Drawable;import android.net.Uri;import android.support.annotation.NonNull;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.RelativeLayout;import android.widget.TextView;import com.blankj.utilcode.util.SPUtils;import com.blankj.utilcode.util.ToastUtils;import com.facebook.drawee.view.SimpleDraweeView;import com.lzj.gallery.library.views.BannerViewPager;import com.jiaoerzhang.platform.R;import com.jiaoerzhang.platform.api.AlbumApi;import com.jiaoerzhang.platform.api.AlbumApiService;import com.jiaoerzhang.platform.common.Constants;import com.jiaoerzhang.platform.entity.album.AlbumEntity;import com.jiaoerzhang.platform.entity.user.CollectionEntity;import com.jiaoerzhang.platform.lib_net.network.BaseResponse;import com.jiaoerzhang.platform.lib_net.network.http.HttpRequestPresenter;import com.jiaoerzhang.platform.lib_net.network.http.ModelCallback;import com.jiaoerzhang.platform.ui.activity.album.AlbumDetailActivity;import com.jiaoerzhang.platform.ui.activity.album.NormalAlbumDetailActivity;import com.jiaoerzhang.platform.ui.activity.album.OrdinaryAlbumActivity;import com.jiaoerzhang.platform.utils.RetrofitUtils;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.schedulers.Schedulers;public class AlbumAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private Context context;    private List<AlbumEntity.Content> list = new ArrayList<>();    private List<AlbumEntity.Content> normalList = new ArrayList<>();    private List<AlbumEntity.Content> bannerList = new ArrayList<>();    private LayoutInflater inflater;    private static final int NORMAL = 0;//精品    private static final int BANNER = 1;//轮播图    public AlbumAdapter(Context context, List<AlbumEntity.Content> all, String type) {        this.context = context;        this.list = all;        inflater = LayoutInflater.from(context);        requestNormal();    }    /**     * 请求普通专辑     */    private void requestNormal() {        HashMap<String, String> params = new HashMap<>();        params.put("clarity", "1");//普通        params.put("page", "1");//第一页        params.put("pageSize", "5");//5个        String key = "{\"clarity\":1}";        params.put("telPhone", SPUtils.getInstance().getString("username"));//5个        HttpRequestPresenter.getInstance().jsonPostData(AlbumApi.SEARCH_ALBUM_URL, params,key, new ModelCallback<AlbumEntity>(AlbumEntity.class) {            @Override            public void onErrorMsg(int code, String msg) {            }            @Override            public void onSuccess(AlbumEntity albumEntity) {                bannerList.addAll(albumEntity.getContent());            }            @Override            public void onSuccessMsg(String status, String message) {            }        });    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        RecyclerView.ViewHolder holder;        if (viewType == NORMAL) {            View view = inflater.inflate(R.layout.fragment_album_item_layout, viewGroup, false);            holder = new MyViewHolder1(view);        } else if (viewType == BANNER) {            View view = inflater.inflate(R.layout.fragment_album_banner_layout, viewGroup, false);            holder = new MyViewHolder2(view);        } else {            holder = null;        }        return holder;    }    @Override    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder viewHolder, final int i) {        if (viewHolder instanceof MyViewHolder1) {            AlbumEntity.Content content = null;            if (list.size() > 0) {                if (bannerList.size() > 0) {                    if (i > 2) {                        content = list.get(i - 1);                    } else {                        content = list.get(i);                    }                } else {                    content = list.get(i);                }                if ("true".equals(content.isNot())) {                    setDrawable(((MyViewHolder1) viewHolder).num,true);                } else {                    setDrawable(((MyViewHolder1) viewHolder).num, false);                }                final AlbumEntity.Content finalContent2 = content;                viewHolder.itemView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        Intent intent = null;                        if (finalContent2.getClarity().equals(Constants.ORDINARY_CLARITY)){//普通                            intent = new Intent(context, NormalAlbumDetailActivity.class);                        }else if (finalContent2.getClarity().equals(Constants.POPULAR_CLARITY)){                            intent = new Intent(context, AlbumDetailActivity.class);                        }                        intent.putExtra("albumId", finalContent2.getId() + "");                        context.startActivity(intent);                    }                });                Uri uri = Uri.parse(content.getCoverUrl());                SimpleDraweeView simpleDraweeView = viewHolder.itemView.findViewById(R.id.album_item_icon);                simpleDraweeView.setImageURI(uri);//                ((MyViewHolder1) viewHolder).num.setText(content.getUcollectNum()+"");                ((MyViewHolder1) viewHolder).num.setText("");                final AlbumEntity.Content finalContent = content;                ((MyViewHolder1) viewHolder).num.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        HashMap<String, String> params = new HashMap<String, String>();                        params.put("username", SPUtils.getInstance().getString("username"));                        params.put("type", "1");                        params.put("albumPhotoId", finalContent.getId() + "");                        if (finalContent.isNot().equals("false")){                            RetrofitUtils.getInstance().createService(AlbumApiService.class)                                    .collection(AlbumApi.COLLECTION_URL, params)                                    .subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer<BaseResponse<CollectionEntity>>() {                                        @Override                                        public void accept(BaseResponse<CollectionEntity> collection) throws Exception {                                            if ("200".equals(collection.getStatus())) {                                                finalContent.setNot("true");                                                notifyDataSetChanged();                                                setDrawable(((MyViewHolder1) viewHolder).num, true);                                            }                                            ToastUtils.showShort(collection.getMessage());                                        }                                    }, new Consumer<Throwable>() {                                        @Override                                        public void accept(Throwable throwable) throws Exception {                                        }                                    });                        }else{                            RetrofitUtils.getInstance().createService(AlbumApiService.class)                                    .cancelCollection(AlbumApi.CANCEL_COLLECTION_URL, params)                                    .subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer<BaseResponse<CollectionEntity>>() {                                        @Override                                        public void accept(BaseResponse<CollectionEntity> collection) throws Exception {                                            if ("200".equals(collection.getStatus())) {                                                finalContent.setNot("false");                                                notifyDataSetChanged();                                                setDrawable(((MyViewHolder1) viewHolder).num, true);                                            }                                            ToastUtils.showShort(collection.getMessage());                                        }                                    }, new Consumer<Throwable>() {                                        @Override                                        public void accept(Throwable throwable) throws Exception {                                        }                                    });                        }                    }                });            } else {            }        } else if (viewHolder instanceof MyViewHolder2) {            MyViewHolder2 myViewHolder2 = (MyViewHolder2) viewHolder;            myViewHolder2.normalLayout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    context.startActivity(new Intent(context, OrdinaryAlbumActivity.class));                }            });            List<String> banners = new ArrayList<>();            if (bannerList.size() == 0) {                return;            }            for (AlbumEntity.Content banner : bannerList) {                banners.add(banner.getCoverUrl());                System.out.println("ididididid:" + banner.getId());            }            System.out.println("banners:" + banners);            if (myViewHolder2.bannerViewPager != null) {                myViewHolder2.bannerViewPager.removeAllViews();            }            myViewHolder2.bannerViewPager.initBanner(banners, true, true)//isGallery参数是否开启3D画廊效果                    .addPageMargin(1, 40)//参数1page之间的间距,参数2中间item距离边界的间距                    .addPoint(0)//添加指示器                    .addPointBottom(7)                    .addStartTimer(5)//自动轮播5秒间隔                    .addRoundCorners(12)//圆角                    .finishConfig()//这句必须加                    .hideIndicator()//隐藏指示器                    .addBannerListener(new BannerViewPager.OnClickBannerListener() {                        @Override                        public void onBannerClick(int position) {                            Intent intent = null;                            if (bannerList.get(position).getClarity().equals(Constants.ORDINARY_CLARITY)){//普通                                intent = new Intent(context, NormalAlbumDetailActivity.class);                            }else if (bannerList.get(position).getClarity().equals(Constants.POPULAR_CLARITY)){                                intent = new Intent(context, AlbumDetailActivity.class);                            } intent.putExtra("albumId", bannerList.get(position).getId() + "");                            context.startActivity(intent);                        }                    });            myViewHolder2.bannerViewPager.stopTimer();            myViewHolder2.bannerViewPager.addBannerListener(new BannerViewPager.OnClickBannerListener() {                @Override                public void onBannerClick(int position) {                    Intent intent = null;                    if (bannerList.get(position).getClarity().equals(Constants.ORDINARY_CLARITY)){//普通                        intent = new Intent(context, NormalAlbumDetailActivity.class);                    }else if (bannerList.get(position).getClarity().equals(Constants.POPULAR_CLARITY)){                        intent = new Intent(context, AlbumDetailActivity.class);                    }   intent.putExtra("albumId", bannerList.get(position).getId() + "");                    context.startActivity(intent);                }            });        }    }    private void setDrawable(TextView followNumTv, boolean b) {        Drawable drawable = null;        if (b){            drawable = context.getResources().getDrawable(R.mipmap.album_red_heart_icon);        }else{            drawable = context.getResources().getDrawable(R.mipmap.album_gray_heart_icon);        }        //一定要加这行！！！！！！！！！！！        drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());        followNumTv.setCompoundDrawables(null, null, drawable, null);    }    private ItemClicklistener itemClicklistener;    public void setItemClicklistener(ItemClicklistener itemClicklistener) {        this.itemClicklistener = itemClicklistener;    }    public interface ItemClicklistener {        void onItemClicklistener(int pos);    }    @Override    public int getItemCount() {        return bannerList.size() > 0 ? list.size() + 1 : list.size();    }    @Override    public int getItemViewType(int position) {        if (getItemCount() >= 3 && bannerList.size() > 0) {            if (position == 2) {                return BANNER;            } else {                return NORMAL;            }        } else {            if (getItemCount() == 2) {                if (position == 1) {                    return BANNER;                } else {                    return NORMAL;                }            }            if (getItemCount() == 1) {                if (position == 0) {                    return BANNER;                } else {                    return NORMAL;                }            }            return NORMAL;        }    }    @Override    public long getItemId(int position) {        return super.getItemId(position);    }    public void refreshData(@NotNull List<AlbumEntity.Content> content) {        if (content.size() == 0) {            ToastUtils.showShort(R.string.no_more_data);            return;        }//        this.list.addAll(content);        for (AlbumEntity.Content c : content) {            if ("2".equals(c.getClarity())) {                normalList.add(c);            }        }////        normalList.addAll(content);        notifyDataSetChanged();    }  static   class MyViewHolder1 extends RecyclerView.ViewHolder {        private TextView num;        public MyViewHolder1(@NonNull View itemView) {            super(itemView);            num = itemView.findViewById(R.id.collectionNum);        }    }  static   class MyViewHolder2 extends RecyclerView.ViewHolder {        RelativeLayout normalLayout;        BannerViewPager bannerViewPager;        public MyViewHolder2(@NonNull View itemView) {            super(itemView);            bannerViewPager = itemView.findViewById(R.id.albumLayout);            normalLayout = itemView.findViewById(R.id.normal_layout);        }    }}