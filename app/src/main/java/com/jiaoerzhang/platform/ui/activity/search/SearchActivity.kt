package com.jiaoerzhang.platform.ui.activity.searchimport android.content.Intentimport android.text.TextUtilsimport android.view.KeyEventimport android.view.inputmethod.EditorInfoimport android.widget.TextViewimport com.blankj.utilcode.util.FileUtilsimport com.blankj.utilcode.util.SPUtilsimport com.google.gson.Gsonimport com.library.flowlayout.FlowLayoutManagerimport com.jiaoerzhang.platform.Rimport com.jiaoerzhang.platform.adapter.album.SearchHistoryAdapterimport com.jiaoerzhang.platform.adapter.album.SearchHotAdapterimport com.jiaoerzhang.platform.api.AlbumApiimport com.jiaoerzhang.platform.api.AlbumApiServiceimport com.jiaoerzhang.platform.api.UserApiimport com.jiaoerzhang.platform.api.UserApiServiceimport com.jiaoerzhang.platform.entity.album.SearchEntityimport com.jiaoerzhang.platform.entity.album.SearchHotEntityimport com.jiaoerzhang.platform.entity.user.CollectionEntityimport com.jiaoerzhang.platform.lib_core.base.BaseActivityimport com.jiaoerzhang.platform.lib_net.network.BaseResponseimport com.jiaoerzhang.platform.utils.AlbumRetrofitUtilsimport com.jiaoerzhang.platform.utils.JsonUtilsimport com.jiaoerzhang.platform.utils.RetrofitUtilsimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.functions.Consumerimport io.reactivex.schedulers.Schedulersimport kotlinx.android.synthetic.main.activity_search.*import java.io.Fileimport java.io.FileInputStreamimport java.io.FileOutputStreamimport java.util.HashMapclass SearchActivity : BaseActivity() {    override fun bindLayoutId(): Int {        return R.layout.activity_search    }    override fun initView() {        back.setOnClickListener { this.finish() }        clear.setOnClickListener { }        historyRv.layoutManager = FlowLayoutManager()        hotHistoryRv.layoutManager = FlowLayoutManager()        search.setOnEditorActionListener(object : TextView.OnEditorActionListener {            override fun onEditorAction(v: TextView?, actionId: Int, event: KeyEvent?): Boolean {                if (actionId == EditorInfo.IME_ACTION_SEARCH) {                    var searchKey: String = search.text.toString().trim()                    if (!TextUtils.isEmpty(searchKey)) {                        search.clearFocus()                        if (!TextUtils.isEmpty(searchKey)) {                            var intent: Intent = Intent(this@SearchActivity, SearchHistoryActivity::class.java)                            intent.putExtra("keyword", search.text.toString())                            startActivity(intent)                            saveHistory()                        }                    }                }                return true            }        })        //清除历史记录        clear.setOnClickListener {            FileUtils.deleteFile(File(filesDir,"history.txt"))            fillHistoryData()        }    }    override fun initData() {        getSearchKeywords()        fillHistoryData()    }    /**     * 搜索热词     */    private fun getSearchKeywords() {        val params = HashMap<String, String>()        AlbumRetrofitUtils.getInstance().createService(AlbumApiService::class.java)                .searchHotKeywords(AlbumApi.SEARCH_HOT_URL, params)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe({ searchEntity ->                    if ("200" == searchEntity.status) {                        var searchHistoryAdapter = SearchHotAdapter(this, R.layout.search_history_item_layout, searchEntity.data.content)                        hotHistoryRv.adapter = searchHistoryAdapter                        searchHistoryAdapter!!.setOnItemClickListener { adapter, view, position ->                            var intent = Intent(this@SearchActivity, SearchHistoryActivity::class.java)                            intent.putExtra("keyword", searchEntity.data.content.get(position).hotWords.toString())                            startActivity(intent)                        }                    } else {                        showToast(searchEntity.message)                    }                }, { })   }    var searchHistoryAdapter: SearchHistoryAdapter? = null    /**     * 搜索历史     */    private fun fillHistoryData() {        var file: File = File(filesDir, "history.txt")        if (!file.exists()){            list = arrayListOf()            searchHistoryAdapter = SearchHistoryAdapter(this, R.layout.search_history_item_layout, list)            historyRv.adapter = searchHistoryAdapter            return        }        var fileInputStream: FileInputStream = FileInputStream(file)        val buffer = ByteArray(FileUtils.getFileLength(file).toInt())        fileInputStream.read(buffer)        fileInputStream.close()        var result: String = String(buffer)        println("result====" + result)        list = JsonUtils.jsonToArrayList(result, SearchEntity::class.java)        searchHistoryAdapter = SearchHistoryAdapter(this, R.layout.search_history_item_layout, list)        historyRv.adapter = searchHistoryAdapter        searchHistoryAdapter!!.setOnItemClickListener { adapter, view, position ->            var intent = Intent(this@SearchActivity, SearchHistoryActivity::class.java)            intent.putExtra("keyword", list.get(position).name.toString())            startActivity(intent)        }        searchHistoryAdapter!!.notifyDataSetChanged()    }    var list: MutableList<SearchEntity> = arrayListOf()    private fun saveHistory() {        var searchEntity: SearchEntity = SearchEntity()        searchEntity.name = search.text.toString()//        if (list.size>0){//            for (searchEntity in list) {//                if (!searchEntity.name.contains(search.text.toString())){//                    list.add(searchEntity)//                }//            }//        }        list.add(searchEntity)        if (list.size>9){            list.removeAt(0)        }        val file = filesDir        if (!file.exists()) {            file.mkdirs()        }        var f: File = File(file, "history.txt")        var fileOutputStream: FileOutputStream = FileOutputStream(f)        var s: String = Gson().toJson(list)        fileOutputStream.write(s.toByteArray())        fileOutputStream.close()        fillHistoryData()    }}