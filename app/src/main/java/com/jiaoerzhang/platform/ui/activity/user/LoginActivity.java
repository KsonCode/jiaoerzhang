package com.jiaoerzhang.platform.ui.activity.user;import android.Manifest;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Color;import android.graphics.Paint;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.Spannable;import android.text.SpannableString;import android.text.TextUtils;import android.text.method.HideReturnsTransformationMethod;import android.text.method.PasswordTransformationMethod;import android.text.style.ForegroundColorSpan;import android.text.style.StyleSpan;import android.text.style.URLSpan;import android.text.util.Linkify;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.blankj.utilcode.util.EncryptUtils;import com.blankj.utilcode.util.PhoneUtils;import com.blankj.utilcode.util.RegexUtils;import com.blankj.utilcode.util.SPUtils;import com.facebook.drawee.view.SimpleDraweeView;import com.jiaoerzhang.platform.R;import com.jiaoerzhang.platform.api.ApiService;import com.jiaoerzhang.platform.api.UserApi;import com.jiaoerzhang.platform.api.UserApiService;import com.jiaoerzhang.platform.entity.user.CodeEntity;import com.jiaoerzhang.platform.entity.user.CoinEntity;import com.jiaoerzhang.platform.entity.user.LoginEntity;import com.jiaoerzhang.platform.entity.user.RegEntity;import com.jiaoerzhang.platform.lib_core.base.BaseActivity;import com.jiaoerzhang.platform.lib_net.network.BaseResponse;import com.jiaoerzhang.platform.ui.activity.MainActivity;import com.jiaoerzhang.platform.ui.activity.user.settings.SettingActivity;import com.jiaoerzhang.platform.utils.FrescoUtil;import com.jiaoerzhang.platform.utils.RetrofitUtils;import com.jiaoerzhang.platform.widget.LoadingDialog;import org.reactivestreams.Subscriber;import org.reactivestreams.Subscription;import java.util.HashMap;import java.util.concurrent.TimeUnit;import butterknife.BindView;import io.reactivex.Flowable;import io.reactivex.Observable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.functions.Function;import io.reactivex.schedulers.Schedulers;public class LoginActivity extends BaseActivity implements View.OnClickListener {    @BindView(R.id.et_phone_num)    TextView et_phone_num;    @BindView(R.id.pwd)    TextView pwd;    @BindView(R.id.eye_icon)    ImageView eye_icon;    @BindView(R.id.login)    Button login;    @BindView(R.id.reg)    TextView reg;    @BindView(R.id.tv_code_login)    TextView tv_code_login;    @BindView(R.id.pwd_login_layout)    LinearLayout pwd_login_layout;    @BindView(R.id.code_login_layout)    LinearLayout code_login_layout;    @BindView(R.id.tv_pwd_login)    TextView tv_pwd_login;    @BindView(R.id.click_get_code)    TextView click_get_code;    @BindView(R.id.code)    TextView code;    private boolean isEye;    private boolean isCode;    @BindView(R.id.policy)    TextView policyTv;    @BindView(R.id.terms)    TextView termsTv;    private LoadingDialog loadingDialog;    @Override    protected void initData() {//        FrescoUtil.Companion.showUrlBlur(login_top_view, "res://com.jiaoerzhang.platform/" + R.drawable.login_bg, 2, 2);        if (!TextUtils.isEmpty(SPUtils.getInstance().getString("username"))) {            et_phone_num.setText(SPUtils.getInstance().getString("username").toString());        }        if (!TextUtils.isEmpty(SPUtils.getInstance().getString("regusername"))) {            et_phone_num.setText(SPUtils.getInstance().getString("regusername").toString());        }    }    @Override    protected void initView() {        loadingDialog = new LoadingDialog(this);        login.setOnClickListener(this);        tv_code_login.setOnClickListener(this);        eye_icon.setOnClickListener(this);        reg.setOnClickListener(this);        pwd_login_layout.setOnClickListener(this);        code_login_layout.setOnClickListener(this);        tv_pwd_login.setOnClickListener(this);        click_get_code.setOnClickListener(this);        termsTv.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG );        policyTv.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG );        termsTv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(LoginActivity.this,DisclaimerAndPolicyActivity.class);                intent.putExtra("from","mz");                startActivity(intent);            }        });        policyTv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(LoginActivity.this,DisclaimerAndPolicyActivity.class);                intent.putExtra("from","ys");                startActivity(intent);            }        });    }    @Override    protected int bindLayoutId() {        return R.layout.activity_login_layout;    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.login:                goLogin();                break;            case R.id.eye_icon:                if (isEye) {                    isEye = false;                    eye_icon.setImageResource(R.mipmap.eye_no_icon);                    pwd.setTransformationMethod(PasswordTransformationMethod.getInstance());//隐藏                } else {                    isEye = true;                    eye_icon.setImageResource(R.mipmap.eye_icon);                    pwd.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//显示                }                break;            case R.id.reg:                startActivity(new Intent(this, RegisterActivity.class));                break;            case R.id.tv_code_login:                isCode = true;                pwd_login_layout.setVisibility(View.GONE);                code_login_layout.setVisibility(View.VISIBLE);                break;            case R.id.tv_pwd_login:                isCode = false;                pwd_login_layout.setVisibility(View.VISIBLE);                code_login_layout.setVisibility(View.GONE);                break;            case R.id.click_get_code:                getCode();                break;        }    }    private void getCode() {        if (TextUtils.isEmpty(et_phone_num.getText().toString())) {            showToast(getString(R.string.phone_empty));            return;        }        if (et_phone_num.getText().toString().length() != 10) {            showToast(getString(R.string.phone_not_standard));            return;        }        timer();        HashMap<String, String> params = new HashMap<String, String>();        params.put("username", et_phone_num.getText().toString());        params.put("type", "2");        loadingDialog.show();        RetrofitUtils.getInstance().createService(UserApiService.class)                .code(UserApi.CODE_URL, params)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<BaseResponse<CodeEntity>>() {                    @Override                    public void accept(BaseResponse<CodeEntity> codeEntity) throws Exception {                        if (codeEntity.getStatus().equals("200")) {                            if (!TextUtils.isEmpty(codeEntity.getData().getCode())) {                                code.setText(codeEntity.getData().getCode());                            }//                            code.setText(codeEntity.getData().getCode());                        } else {                            showToast(codeEntity.getMessage());                            startActivity(new Intent(LoginActivity.this, RegisterActivity.class));                        }                        loadingDialog.dismiss();                    }                }, new Consumer<Throwable>() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        loadingDialog.dismiss();                        System.out.println("throwable:" + throwable);                    }                });    }    /**     * 登录     */    private void goLogin() {        if (TextUtils.isEmpty(et_phone_num.getText().toString())) {            showToast(getString(R.string.phone_empty));            return;        }        if (!isCode) {            if (TextUtils.isEmpty(pwd.getText().toString())) {                showToast(getString(R.string.pwd_empty));                return;            }        } else {            if (TextUtils.isEmpty(code.getText().toString())) {                showToast(getString(R.string.code_empty));                return;            }        }        if (et_phone_num.getText().toString().length() != 10) {            showToast(getString(R.string.phone_not_standard));            return;        }        loadingDialog.show();        HashMap<String, String> params = new HashMap<String, String>();        params.put("username", et_phone_num.getText().toString());        if (!isCode) {            params.put("password", EncryptUtils.encryptMD5ToString(pwd.getText().toString()));        } else {            params.put("code", code.getText().toString());        }        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            //    ActivityCompat#requestPermissions            // here to request the missing permissions, and then overriding            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,            //                                          int[] grantResults)            // to handle the case where the user grants the permission. See the documentation            // for ActivityCompat#requestPermissions for more details.            return;        }        params.put("deviceId", PhoneUtils.getDeviceId() + "");        UserApiService userApiService = RetrofitUtils.getInstance().createService(UserApiService.class);        Observable<BaseResponse<LoginEntity>> observable = null;        if (!isCode) {            observable = userApiService.login(UserApi.LOGIN_URL, params);        } else {            observable = userApiService.login(UserApi.CODE_LOGIN_URL, params);        }        observable                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<BaseResponse<LoginEntity>>() {                    @Override                    public void accept(BaseResponse<LoginEntity> login) throws Exception {                        if ("200".equals(login.getStatus())) {                            startActivity(new Intent(LoginActivity.this, MainActivity.class));                            LoginActivity.this.finish();                            SPUtils.getInstance().put("username", login.getData().getUsername());                            SPUtils.getInstance().put("loginToken", login.getData().getLoginToken());                        } else {                            showToast(login.getMessage());                        }                        loadingDialog.dismiss();                    }                }, new Consumer<Throwable>() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        loadingDialog.dismiss();                    }                });    }    Subscription mSubscription = null; // Subscription 对象，用于取消订阅关系，防止内存泄露    //开始倒计时，用 RxJava2 实现    private void timer() {        final long count = 29L;        Flowable.interval(0, 1, TimeUnit.SECONDS)//设置0延迟，每隔一秒发送一条数据                .onBackpressureBuffer()//加上背压策略                .take(count) //设置循环次数                .map(new Function<Long, Long>() {                         @Override                         public Long apply(Long aLong) throws Exception {                             return count - aLong;                         }                     }                ).observeOn(AndroidSchedulers.mainThread())//操作UI主要在UI线程                .subscribe(new Subscriber<Long>() {                    @Override                    public void onSubscribe(Subscription s) {                        click_get_code.setEnabled(false); //在发送数据的时候设置为不能点击                        click_get_code.setTextColor(ContextCompat.getColor(LoginActivity.this, R.color.common_hint_txt_color)); //背景色设为灰色                        mSubscription = s;                        s.request(Long.MAX_VALUE);//设置请求事件的数量，重要，必须调用                    }                    @Override                    public void onNext(Long aLong) {                        if (aLong == null) {                            aLong = 29l;                        }                        click_get_code = findViewById(R.id.click_get_code);                        click_get_code.setText(aLong + "s"); //接受到一条就是会操作一次UI                    }                    @Override                    public void onError(Throwable t) {                    }                    @Override                    public void onComplete() {                        click_get_code.setText(getString(R.string.get_code));                        click_get_code.setEnabled(true);                        click_get_code.setTextColor(ContextCompat.getColor(LoginActivity.this, R.color.common_red_txt_color)); //背景色设为红色                        mSubscription.cancel();//取消订阅，防止内存泄漏                    }                });    }}