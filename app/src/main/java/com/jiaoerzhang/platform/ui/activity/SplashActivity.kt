package com.jiaoerzhang.platform.ui.activityimport android.Manifestimport android.animation.Animatorimport android.animation.AnimatorSetimport android.animation.ObjectAnimatorimport android.content.Intentimport android.net.Uriimport android.support.v7.app.AppCompatActivityimport android.os.Bundleimport android.text.TextUtilsimport android.view.Viewimport android.widget.Toastimport com.blankj.utilcode.util.*import com.tbruyelle.rxpermissions2.RxPermissionsimport com.jiaoerzhang.platform.Rimport com.jiaoerzhang.platform.api.ApiServiceimport com.jiaoerzhang.platform.api.UserApiimport com.jiaoerzhang.platform.api.UserApiServiceimport com.jiaoerzhang.platform.common.Constantsimport com.jiaoerzhang.platform.entity.user.LoginEntityimport com.jiaoerzhang.platform.lib_net.network.BaseResponseimport com.jiaoerzhang.platform.lib_net.network.Responseimport com.jiaoerzhang.platform.lib_net.network.http.HttpRequestPresenterimport com.jiaoerzhang.platform.lib_net.network.http.ModelCallbackimport com.jiaoerzhang.platform.ui.activity.user.LoginActivityimport com.jiaoerzhang.platform.utils.RetrofitUtilsimport io.reactivex.Observableimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.functions.Consumerimport io.reactivex.schedulers.Schedulersimport kotlinx.android.synthetic.main.activity_splash.*import java.lang.reflect.Methodclass SplashActivity : AppCompatActivity() {    var rxPermissions = RxPermissions(this)    private val time: Int = 1000//动画时间    private var gotoLogin: Boolean = false    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_splash)        requestPermission()        initAnimator()        gotoMain()        getDeviceFingerprintID()    }    /**     * 通过反射获取支付id     */    private fun getDeviceFingerprintID() {//        var masapayPaymentRequest:MasapayPaymentRequest = MasapayPaymentRequest()//        var clz:Class<MasapayPaymentRequest>  = MasapayPaymentRequest::class.java////        var method:Method = clz.getDeclaredMethod("getDeviceFingerprintID", String::class.java)//        method.isAccessible = true//        var string:String = method.invoke(masapayPaymentRequest,Constants.MERCHANTID) as String//        println("idididididi====="+string)//        SPUtils.getInstance().put("deviceFingerId",string)    }    private fun requestPermission() {// Must be done during an initialization phase like onCreate        rxPermissions                .request(Manifest.permission.READ_PHONE_STATE, Manifest.permission.READ_PHONE_STATE, Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.CALL_PHONE,Manifest.permission.REQUEST_INSTALL_PACKAGES)                .subscribe({ aBoolean ->                    if (aBoolean!!) {                    }                }, { })    }    /**     * 校验token     *///    private fun verifyToken() {//        var params: HashMap<String, String> = HashMap()//        params.put("username", SPUtils.getInstance().getString("username"))//        params.put("loginToken", SPUtils.getInstance().getString("loginToken"))//////        val userApiService = RetrofitUtils.getInstance().createService(UserApiService::class.java)//        var observable: Observable<Response>? = userApiService.token(UserApi.TOKEN_URL, params)////        observable!!//                .subscribeOn(Schedulers.io())//                .observeOn(AndroidSchedulers.mainThread())//                .subscribe({ login ->//                    if (login.status.equals("200")) {//                        var intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)//                        intent.putExtra("from","splash")//                        startActivity(intent)//                         } else {////                        startActivity(Intent(this@SplashActivity, LoginActivity::class.java))//                    }//                    finish()////                }, { })//////    }    /**     * 初始化动画     */    private fun initAnimator() {        var animator = AnimatorSet()        var scaleX = ObjectAnimator.ofFloat(img_center, "scaleX", 1f, 1.1f)        var scaleY = ObjectAnimator.ofFloat(img_center, "scaleY", 1f, 1.1f)        var alpha = ObjectAnimator.ofFloat(iv_icon, "alpha", 0.0f, 1f)        var translationIv = ObjectAnimator.ofFloat(iv_icon, "translationY", iv_icon.translationY, -(ScreenUtils.getScreenHeight() / 2 - SizeUtils.getMeasuredHeight(iv_icon)).toFloat())        animator.play(scaleX).with(scaleY).with(alpha).before(translationIv)        animator.duration = time.toLong()        animator.start()        animator.addListener(object : Animator.AnimatorListener {            override fun onAnimationRepeat(animation: Animator?) {            }            override fun onAnimationCancel(animation: Animator?) {            }            override fun onAnimationStart(animation: Animator?) {            }            override fun onAnimationEnd(animation: Animator?) {//                verifyToken()                var intent:Intent = Intent(this@SplashActivity,MainActivity::class.java)                        intent.putExtra("from","splash")                        startActivity(intent)            }        })    }    /**     * 跳转     */    private fun gotoMain() {        login_tips.visibility = View.INVISIBLE    }}