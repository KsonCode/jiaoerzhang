package com.jiaoerzhang.platform.ui.activity.user;import android.content.Intent;import android.graphics.Paint;import android.support.v4.content.ContextCompat;import android.text.InputType;import android.text.TextUtils;import android.text.method.HideReturnsTransformationMethod;import android.text.method.PasswordTransformationMethod;import android.view.View;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.blankj.utilcode.util.EncryptUtils;import com.blankj.utilcode.util.RegexUtils;import com.blankj.utilcode.util.SPUtils;import com.blankj.utilcode.util.ToastUtils;import com.facebook.drawee.view.SimpleDraweeView;import com.jiaoerzhang.platform.R;import com.jiaoerzhang.platform.api.ApiService;import com.jiaoerzhang.platform.api.UserApi;import com.jiaoerzhang.platform.api.UserApiService;import com.jiaoerzhang.platform.entity.user.CodeEntity;import com.jiaoerzhang.platform.entity.user.RegEntity;import com.jiaoerzhang.platform.lib_core.base.BaseActivity;import com.jiaoerzhang.platform.lib_net.network.BaseResponse;import com.jiaoerzhang.platform.utils.FrescoUtil;import com.jiaoerzhang.platform.utils.RetrofitUtils;import com.jiaoerzhang.platform.widget.LoadingDialog;import org.reactivestreams.Subscriber;import org.reactivestreams.Subscription;import java.util.HashMap;import java.util.concurrent.TimeUnit;import butterknife.BindView;import io.reactivex.Flowable;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.functions.Consumer;import io.reactivex.functions.Function;import io.reactivex.schedulers.Schedulers;public class RegisterActivity extends BaseActivity implements View.OnClickListener {//    @BindView(R.id.login_top_view)//    ImageView simpleDraweeView;    @BindView(R.id.goLogin)    TextView goLogin;    @BindView(R.id.click_get_code)    TextView click_get_code;    @BindView(R.id.reg)    TextView reg;    @BindView(R.id.et_phone_num)    TextView et_phone_num;    @BindView(R.id.pwd)    TextView pwd;    @BindView(R.id.code)    TextView code;    @BindView(R.id.eye_icon)    ImageView eye_icon;    @BindView(R.id.invitation)    TextView invitation;    @BindView(R.id.invitation_layout)    LinearLayout invitation_layout;    @BindView(R.id.invitationCodeEt)    EditText invitationCodeEt;    @BindView(R.id.policy)    TextView policyTv;    @BindView(R.id.terms)    TextView termsTv;    private boolean isEye;    private LoadingDialog loadingDialog;    @Override    protected void initData() {    }    @Override    protected void initView() {        loadingDialog = new LoadingDialog(this);//        FrescoUtil.Companion.showUrlBlur(simpleDraweeView, "res://com.jiaoerzhang.platform/" + R.drawable.bg_splash, 2, 2);        goLogin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(RegisterActivity.this, LoginActivity.class));            }        });        click_get_code.setOnClickListener(this);        eye_icon.setOnClickListener(this);        invitation.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                invitation.setVisibility(View.GONE);                invitation_layout.setVisibility(View.VISIBLE);            }        });        termsTv.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG );        policyTv.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG );        termsTv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(RegisterActivity.this,DisclaimerAndPolicyActivity.class);                intent.putExtra("from","mz");                startActivity(intent);            }        });        policyTv.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(RegisterActivity.this,DisclaimerAndPolicyActivity.class);                intent.putExtra("from","ys");                startActivity(intent);            }        });        reg.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (TextUtils.isEmpty(et_phone_num.getText().toString())) {                    showToast(getResources().getString(R.string.phone_empty));                    return;                }                if (TextUtils.isEmpty(pwd.getText().toString())) {                    showToast(getResources().getString(R.string.pwd_empty));                    return;                }                if (TextUtils.isEmpty(code.getText().toString())) {                    showToast(getResources().getString(R.string.code_empty));                    return;                }                if (et_phone_num.getText().toString().length() != 10) {                    showToast(getResources().getString(R.string.phone_not_standard));                    return;                }//                if (invitationCodeEt.getText().toString().length() != 10) {//                    showToast("invigation code is empty");//                    return;//                }                loadingDialog.show();                HashMap<String, String> params = new HashMap<String, String>();                params.put("username", et_phone_num.getText().toString());                params.put("password", EncryptUtils.encryptMD5ToString(pwd.getText().toString()));                params.put("code", code.getText().toString());                params.put("inviteCode", invitationCodeEt.getText().toString());                params.put("sdkSource", "test");                RetrofitUtils.getInstance().createService(UserApiService.class)                        .reg(UserApi.REG_URL, params)                        .subscribeOn(Schedulers.io())                        .observeOn(AndroidSchedulers.mainThread())                        .subscribe(new Consumer<RegEntity>() {                            @Override                            public void accept(RegEntity regEntity) throws Exception {                                if (regEntity.getStatus() == 200) {                                    System.out.println("message========" + regEntity.getMessage());                                    Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);                                    startActivity(intent);                                    SPUtils.getInstance().put("regusername", et_phone_num.getText().toString());                                    RegisterActivity.this.finish();                                } else {                                    showToast(regEntity.getMessage());                                }                                loadingDialog.dismiss();                            }                        }, new Consumer<Throwable>() {                            @Override                            public void accept(Throwable throwable) throws Exception {                                loadingDialog.dismiss();                            }                        });            }        });    }    @Override    protected int bindLayoutId() {        return R.layout.activity_reg_layout;    }    Subscription mSubscription = null; // Subscription 对象，用于取消订阅关系，防止内存泄露    //开始倒计时，用 RxJava2 实现    private void timer() {        final long count = 29L;        Flowable.interval(0, 1, TimeUnit.SECONDS)//设置0延迟，每隔一秒发送一条数据                .onBackpressureBuffer()//加上背压策略                .take(count) //设置循环次数                .map(new Function<Long, Long>() {                         @Override                         public Long apply(Long aLong) throws Exception {                             return count - aLong;                         }                     }                ).observeOn(AndroidSchedulers.mainThread())//操作UI主要在UI线程                .subscribe(new Subscriber<Long>() {                    @Override                    public void onSubscribe(Subscription s) {                        click_get_code.setEnabled(false); //在发送数据的时候设置为不能点击                        click_get_code.setTextColor(ContextCompat.getColor(RegisterActivity.this, R.color.common_hint_txt_color)); //背景色设为灰色                        mSubscription = s;                        s.request(Long.MAX_VALUE);//设置请求事件的数量，重要，必须调用                    }                    @Override                    public void onNext(Long aLong) {                        click_get_code.setText(aLong + "s"); //接受到一条就是会操作一次UI                    }                    @Override                    public void onError(Throwable t) {                    }                    @Override                    public void onComplete() {                        click_get_code.setText("Click to Get");                        click_get_code.setEnabled(true);                        click_get_code.setTextColor(ContextCompat.getColor(RegisterActivity.this, R.color.common_red_txt_color)); //背景色设为红色                        mSubscription.cancel();//取消订阅，防止内存泄漏                    }                });    }    @Override    protected void onDestroy() {        super.onDestroy();        if (mSubscription != null)            mSubscription.cancel();//取消订阅，防止内存泄漏    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.click_get_code:                getCode();                break;            case R.id.eye_icon:                if (isEye) {                    isEye = false;                    eye_icon.setImageResource(R.mipmap.eye_no_icon);                    pwd.setTransformationMethod(PasswordTransformationMethod.getInstance());//隐藏                } else {                    isEye = true;                    eye_icon.setImageResource(R.mipmap.eye_icon);                    pwd.setTransformationMethod(HideReturnsTransformationMethod.getInstance());//显示                }                break;        }    }    /**     * 获取验证码     */    private void getCode() {        if (TextUtils.isEmpty(et_phone_num.getText().toString())) {            showToast(getResources().getString(R.string.phone_empty));            return;        }        if (et_phone_num.getText().toString().length() != 10) {            showToast(getResources().getString(R.string.phone_not_standard));            return;        }        timer();        HashMap<String, String> params = new HashMap<String, String>();        params.put("username", et_phone_num.getText().toString());        params.put("type", "1");//注册类型        loadingDialog.show();        RetrofitUtils.getInstance().createService(UserApiService.class)                .code(UserApi.CODE_URL, params)                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<BaseResponse<CodeEntity>>() {                    @Override                    public void accept(BaseResponse<CodeEntity> codeEntity) throws Exception {                        if (codeEntity.getStatus().equals("200")) {                            if (!TextUtils.isEmpty(codeEntity.getData().getCode())) {                                code.setText(codeEntity.getData().getCode());                            }                        } else {                            ToastUtils.showShort(codeEntity.getMessage());                        }                        loadingDialog.dismiss();                    }                }, new Consumer<Throwable>() {                    @Override                    public void accept(Throwable throwable) throws Exception {                        loadingDialog.dismiss();                        System.out.println("throwable:" + throwable);                    }                });    }}