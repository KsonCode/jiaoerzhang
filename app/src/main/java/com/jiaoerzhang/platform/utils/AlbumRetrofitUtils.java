package com.jiaoerzhang.platform.utils;import com.jiaoerzhang.platform.api.ApiService;import com.jiaoerzhang.platform.app.App;import com.jiaoerzhang.platform.lib_net.network.interceptors.HeaderInterceptor;import com.jiaoerzhang.platform.net.CacheInteceptor;import okhttp3.Cache;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;import retrofit2.converter.gson.GsonConverterFactory;import java.io.File;import java.util.concurrent.TimeUnit;public class AlbumRetrofitUtils {    private static volatile AlbumRetrofitUtils mInstance;    private Retrofit retrofit;    private OkHttpClient okHttpClient;    private AlbumRetrofitUtils() {        HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();        httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);        //混存        long maxCacheSize = 100 * 1024 * 1024;//100m//        File httpCacheDirectory = new File(Environment.get, "okhttpCache");        //设置缓存路径        File cacheFile = new File(App.context.getCacheDir(), "caheData");        //设置缓存大小        Cache cache = new Cache(cacheFile, maxCacheSize);        okHttpClient = new OkHttpClient.Builder()                .readTimeout(10, TimeUnit.SECONDS)                .writeTimeout(10,TimeUnit.SECONDS)                .connectTimeout(10,TimeUnit.SECONDS)                .addInterceptor(httpLoggingInterceptor)                .addInterceptor(new CacheInteceptor())                .addNetworkInterceptor(httpLoggingInterceptor)                .addInterceptor(new HeaderInterceptor())//头部拦截器                .cache(cache)//缓存                .build();        retrofit = new Retrofit.Builder()                .baseUrl(ApiService.ALBUM_BASE_URL)                .client(okHttpClient)                .addConverterFactory(GsonConverterFactory.create())                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())                .build();    }    public static AlbumRetrofitUtils getInstance() {        if (mInstance == null) {            synchronized (AlbumRetrofitUtils.class) {                if (mInstance == null) {                    mInstance = new AlbumRetrofitUtils();                }            }        }        return mInstance;    }    /**     * 动态代理模式，创建请求接口类     * @param tClass     * @param <T>     * @return     */    public <T> T createService(Class<T> tClass){        return retrofit.create(tClass);    }}